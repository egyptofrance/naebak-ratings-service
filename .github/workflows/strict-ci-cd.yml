name: Naibak Microservice CI/CD - Strict Governance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: 3.11
  NODE_VERSION: 18
  MINIMUM_COVERAGE: 90
  FAIL_ON_VIOLATIONS: true

jobs:
  # AI Governance and Code Quality Gate
  ai-governance-gate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # للحصول على تاريخ كامل للمقارنة

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run AI Governance Check
        run: |
          python scripts/ai_governance_hook.py $(git diff --name-only HEAD~1 HEAD | grep '\.py$' || echo "")
        continue-on-error: false  # فشل فوري إذا فشل الفحص

      - name: Validate Code-Test Ratio
        run: |
          # التحقق من أن كل ملف كود له اختبارات مقابلة
          python scripts/code_test_ratio_check.py
        continue-on-error: false

  # Security Scan - Zero Tolerance
  security-scan:
    runs-on: ubuntu-latest
    needs: [ai-governance-gate]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit safety semgrep

      - name: Run Bandit security scan (STRICT)
        run: |
          bandit -r app/ -f json -o bandit-report.json
          bandit -r app/ -ll -f txt
          # فشل إذا وُجدت مشاكل أمنية متوسطة أو عالية
          if [ $(jq '.results | length' bandit-report.json) -gt 0 ]; then
            echo "❌ Security vulnerabilities found!"
            cat bandit-report.json
            exit 1
          fi

      - name: Run Safety check (STRICT)
        run: |
          safety check --json --output safety-report.json
          # فشل إذا وُجدت ثغرات في المكتبات
          if [ $(jq '.vulnerabilities | length' safety-report.json) -gt 0 ]; then
            echo "❌ Vulnerable dependencies found!"
            cat safety-report.json
            exit 1
          fi

      - name: Run Semgrep security scan (STRICT)
        run: |
          semgrep --config=auto app/ --json --output=semgrep-report.json
          # فشل إذا وُجدت مشاكل أمنية
          if [ $(jq '.results | length' semgrep-report.json) -gt 0 ]; then
            echo "❌ Security issues found by Semgrep!"
            cat semgrep-report.json
            exit 1
          fi

  # Code Quality - Strict Standards
  code-quality:
    runs-on: ubuntu-latest
    needs: [ai-governance-gate]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black flake8 isort mypy pre-commit

      - name: Run pre-commit hooks
        run: |
          pre-commit install
          pre-commit run --all-files

      - name: Run Black formatter check (STRICT)
        run: |
          black --check --diff app/ tests/
          if [ $? -ne 0 ]; then
            echo "❌ Code formatting issues found!"
            exit 1
          fi

      - name: Run isort import sorting check (STRICT)
        run: |
          isort --check-only --diff app/ tests/
          if [ $? -ne 0 ]; then
            echo "❌ Import sorting issues found!"
            exit 1
          fi

      - name: Run Flake8 linting (STRICT)
        run: |
          flake8 app/ tests/ --max-line-length=88 --extend-ignore=E203,W503 --max-complexity=10
          if [ $? -ne 0 ]; then
            echo "❌ Linting issues found!"
            exit 1
          fi

      - name: Run MyPy type checking (STRICT)
        run: |
          mypy app/ --ignore-missing-imports --strict
          if [ $? -ne 0 ]; then
            echo "❌ Type checking issues found!"
            exit 1
          fi

  # Comprehensive Testing - 90% Coverage Required
  comprehensive-testing:
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Coverage Check (STRICT 90%)
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key
          DEBUG: True
        run: |
          python scripts/coverage_check.py
          if [ $? -ne 0 ]; then
            echo "❌ Coverage below 90% threshold!"
            exit 1
          fi

      - name: Run Unit Tests (STRICT)
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key
          DEBUG: True
        run: |
          pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=html --cov-fail-under=${{ env.MINIMUM_COVERAGE }} --maxfail=1
          if [ $? -ne 0 ]; then
            echo "❌ Unit tests failed!"
            exit 1
          fi

      - name: Run Integration Tests (STRICT)
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key
          DEBUG: True
        run: |
          pytest tests/integration/ -v --maxfail=1
          if [ $? -ne 0 ]; then
            echo "❌ Integration tests failed!"
            exit 1
          fi

      - name: Run Security Tests (STRICT)
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key
          DEBUG: True
        run: |
          pytest tests/security/ -v --maxfail=1
          if [ $? -ne 0 ]; then
            echo "❌ Security tests failed!"
            exit 1
          fi

      - name: Run AI Governance Tests (STRICT)
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key
          DEBUG: True
        run: |
          pytest tests/governance/ -v --maxfail=1
          if [ $? -ne 0 ]; then
            echo "❌ AI Governance tests failed!"
            exit 1
          fi

  # Contract Testing - API Compatibility
  contract-testing:
    runs-on: ubuntu-latest
    needs: [comprehensive-testing]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install schemathesis

      - name: Run Contract Validation (STRICT)
        run: |
          python scripts/contract_validation.py
          if [ $? -ne 0 ]; then
            echo "❌ Contract validation failed!"
            exit 1
          fi

  # Build and Push Docker Image (Only after ALL checks pass)
  build-and-push:
    runs-on: ubuntu-latest
    needs: [contract-testing]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Google Container Registry
        uses: docker/login-action@v3
        with:
          registry: gcr.io
          username: _json_key
          password: ${{ secrets.GCP_SA_KEY }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            gcr.io/${{ secrets.GCP_PROJECT_ID }}/naibak-ratings-service:${{ github.sha }}
            gcr.io/${{ secrets.GCP_PROJECT_ID }}/naibak-ratings-service:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Production (Only main branch, with manual approval)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main'
    environment: 
      name: production
      url: https://naibak-ratings-service.a.run.app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy to Cloud Run (Production) - Zero Downtime
        run: |
          gcloud run deploy naibak-ratings-service \
            --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/naibak-ratings-service:${{ github.sha }} \
            --platform managed \
            --region us-central1 \
            --allow-unauthenticated \
            --set-env-vars="ENVIRONMENT=production,DEBUG=False,AI_GOVERNANCE_ENABLED=True" \
            --memory=2Gi \
            --cpu=2 \
            --max-instances=100 \
            --min-instances=1 \
            --no-traffic

      - name: Canary Deployment with Health Checks
        run: |
          SERVICE_URL=$(gcloud run services describe naibak-ratings-service \
            --region=us-central1 \
            --format='value(status.url)')
          
          # 10% traffic
          gcloud run services update-traffic naibak-ratings-service \
            --to-revisions=LATEST=10 \
            --region=us-central1
          
          sleep 60
          curl -f "${SERVICE_URL}/health" || exit 1
          
          # 50% traffic
          gcloud run services update-traffic naibak-ratings-service \
            --to-revisions=LATEST=50 \
            --region=us-central1
          
          sleep 120
          curl -f "${SERVICE_URL}/health" || exit 1
          
          # 100% traffic
          gcloud run services update-traffic naibak-ratings-service \
            --to-revisions=LATEST=100 \
            --region=us-central1

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    steps:
      - name: Notify Success
        if: success()
        run: |
          echo "🎉 Deployment completed successfully with full governance compliance!"

      - name: Notify Failure
        if: failure()
        run: |
          echo "❌ Deployment failed - All governance checks must pass!"
          exit 1
